#!/usr/bin/env bash

### GPU DRIVERS
# nvidia [https://aur.archlinux.org/packages?O=0&SeB=nd&K=390xx&outdated=&SB=p&SO=d&PP=50&submit=Go]
paru -S --needed nvidia-390xx-{dkms,utils} lib32-nvidia-390xx-utils # Nvidia gpu driver
paru -S --needed nvidia-390xx-settings                              # Nvidia gpu setting

# INTEL
pacman -S --needed xf86-video-intel # Intel gpu driver

# GPU Switcher
paru -S --needed optimus-manager bbswitch-dkms acpi_call-dkms
systemctl enable optimus-manager
sed -i 's|# Option|Option|g' /etc/optimus-manager/xorg/*-mode/*.conf # Enable default xorg option in optimus-manager configs

########################
### OTHER GPU STUFF
# openGL # [Check mesa-amber & lib32-mesa-amber]
pacman -S --needed mesa lib32-mesa # open-source implementation of the OpenGL specification

# Vulkan # [Verify with vulkaninfo in vulkan-tools]
pacman -S --needed vulkan-icd-loader lib32-vulkan-icd-loader   # Vulkan Installable Client Driver (ICD) Loader
pacman -S --needed vulkan-intel lib32-vulkan-intel             # Intel's Vulkan driver
pacman -S --needed vulkan-mesa-layers lib32-vulkan-mesa-layers # Mesa's Vulkan layers

########################
### HW VIDEO ACCLERATION
# VAAPI [check with vainfo in libva-utils package]
pacman -S --needed libva lib32-libva                           # VA-API for linux
pacman -S --needed libva-intel-driver lib32-libva-intel-driver # VA-API driver for intel
#paru -S --needed libva-intel-driver-hybrid intel-hybrid-codec-driver # Modified libva-intel-driver to support Haswell 8-bit HEVC/h.265 decoding

# VDPAU  [check with vdpauinfo]
pacman -S --needed libvdpau lib32-libvdpau

# VDPAU on VAAPI Translation layers
pacman -S --needed libva-vdpau-driver lib32-libva-vdpau-driver # VDPAU-based backend for VA-API
pacman -S --needed libvdpau-va-gl                              # VDPAU driver with OpenGL/VAAPI backend. H.264 only
#paru -S --needed libva-nvidia-driver           # [Nvidia] CUDA NVDECODE based backend for VAAPI (Need cuda) [Conflict: libva-vdpau-driver]
pacman -S --needed mesa-vdpau lib32-mesa-vdpau # Mesa VDPAU drivers

# Env variable for VDPAU/VAAPI/VULKAN
echo 'if [[ "$(optimus-manager --print-mode)" =~ 'nvidia' ]]; then
    export LIBVA_DRIVER_NAME='nvidia' # /usr/lib/dri/${LIBVA_DRIVER_NAME}_drv_video.so
    export VDPAU_DRIVER='nvidia'      # /usr/lib/vdpau/libvdpau_${VDPAU_DRIVER}.so
    #export VK_ICD_FILENAMES='/usr/share/vulkan/icd.d/nvidia_icd.json'
elif [[ "$(optimus-manager --print-mode)" =~ 'integrated' ]]; then
    export LIBVA_DRIVER_NAME='i965'
    export VDPAU_DRIVER='va_gl'
    #export VK_ICD_FILENAMES='/usr/share/vulkan/icd.d/intel_icd.x86_64.json'
fi' >/etc/profile.d/env.sh

### INTEL GPU STUFF
# Enable framebuffer compression & Fastboot [For intel gpu >6-gen]
echo -e 'options i915 enable_fbc=1 fastboot=1' >/etc/modprobe.d/i915.conf

### EXTRA LIBS/PKGS FOR GRAPHIC
paru -S --needed libglvnd lib32-libglvnd # The GL Vendor-Neutral Dispatch library E.g provides libegl

### CPU Microcode
paru -S intel-ucode

# EXTRA JUNK
# adriconf

# SOME INFO
# https://www.reddit.com/r/archlinux/comments/n5ypqh/eli5_intel_graphic_drivers/
# D3D = Proprietary 2D & 3D graphic Api for windows
# openGL = Open source 2D & 3D graphic Api
# Vulkan = Modern sucessor of openGL & D3D
# MESA = Libs for base-gpu-rendering, openGL & Vulkan
# XF86-video-* = xf86-video-* packages drivers to enable hardware 2D acceleration in Xorg using vendor-specific code
# Vulkan-extra-layers,vulkan-validation-layers are for development stuff
# VDPAU
# VAAPI
#
#
#
#

# NOTES
# lib32-libva-intel-driver & lib32-libva-vdpau-driver are outdated
